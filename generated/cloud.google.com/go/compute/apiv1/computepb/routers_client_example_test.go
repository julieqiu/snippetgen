// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.


package computepb_test

import (
	"context"

	computepb "cloud.google.com/go/compute/apiv1/computepb"
	"google.golang.org/api/iterator"
)

func ExampleNewRoutersClient() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Use client.
	_ = c
}

func ExampleRoutersClient_AggregatedList() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#AggregatedListRoutersRequest.
	req := &computepb.AggregatedListRoutersRequest{
		Filter: "",
		IncludeAllScopes: "",
		MaxResults: "",
		OrderBy: "",
		PageToken: "",
		Project: "",
		ReturnPartialSuccess: "",
		ServiceProjectNumber: "",
	}
	it := c.AggregatedList(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp

		// If you need to access the underlying RPC response,
		// you can do so by casting the `Response` as below.
		// Otherwise, remove this line. Only populated after
		// first call to Next(). Not safe for concurrent access.
		_ = it.Response.(*computepb.RouterAggregatedList)
	}
}

func ExampleRoutersClient_Delete() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#DeleteRouterRequest.
	req := &computepb.DeleteRouterRequest{
		Project: "",
		Region: "",
		RequestId: "",
		Router: "",
	}
	resp, err := c.Delete(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRoutersClient_Get() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#GetRouterRequest.
	req := &computepb.GetRouterRequest{
		Project: "",
		Region: "",
		Router: "",
	}
	resp, err := c.Get(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRoutersClient_GetNatIpInfo() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#GetNatIpInfoRouterRequest.
	req := &computepb.GetNatIpInfoRouterRequest{
		NatName: "",
		Project: "",
		Region: "",
		Router: "",
	}
	resp, err := c.GetNatIpInfo(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRoutersClient_GetNatMappingInfo() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#GetNatMappingInfoRoutersRequest.
	req := &computepb.GetNatMappingInfoRoutersRequest{
		Filter: "",
		MaxResults: "",
		NatName: "",
		OrderBy: "",
		PageToken: "",
		Project: "",
		Region: "",
		ReturnPartialSuccess: "",
		Router: "",
	}
	it := c.GetNatMappingInfo(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp

		// If you need to access the underlying RPC response,
		// you can do so by casting the `Response` as below.
		// Otherwise, remove this line. Only populated after
		// first call to Next(). Not safe for concurrent access.
		_ = it.Response.(*computepb.VmEndpointNatMappingsList)
	}
}

func ExampleRoutersClient_GetRouterStatus() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#GetRouterStatusRouterRequest.
	req := &computepb.GetRouterStatusRouterRequest{
		Project: "",
		Region: "",
		Router: "",
	}
	resp, err := c.GetRouterStatus(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRoutersClient_Insert() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#InsertRouterRequest.
	req := &computepb.InsertRouterRequest{
		Project: "",
		Region: "",
		RequestId: "",
		RouterResource: &computepb.Router{
			Bgp: &computepb.RouterBgp{
				AdvertiseMode: "",
				AdvertisedGroups: "",
				AdvertisedIpRanges: &computepb.RouterAdvertisedIpRange{...}
				Asn: "",
				IdentifierRange: "",
				KeepaliveInterval: "",
			}
			BgpPeers: &computepb.RouterBgpPeer{
				AdvertiseMode: "",
				AdvertisedGroups: "",
				AdvertisedIpRanges: &computepb.RouterAdvertisedIpRange{...}
				AdvertisedRoutePriority: "",
				Bfd: &computepb.RouterBgpPeerBfd{...}
				CustomLearnedIpRanges: &computepb.RouterBgpPeerCustomLearnedIpRange{...}
				CustomLearnedRoutePriority: "",
				Enable: "",
				EnableIpv4: "",
				EnableIpv6: "",
				ExportPolicies: "",
				ImportPolicies: "",
				InterfaceName: "",
				IpAddress: "",
				Ipv4NexthopAddress: "",
				Ipv6NexthopAddress: "",
				ManagementType: "",
				Md5AuthenticationKeyName: "",
				Name: "",
				PeerAsn: "",
				PeerIpAddress: "",
				PeerIpv4NexthopAddress: "",
				PeerIpv6NexthopAddress: "",
				RouterApplianceInstance: "",
			}
			CreationTimestamp: "",
			Description: "",
			EncryptedInterconnectRouter: "",
			Id: "",
			Interfaces: &computepb.RouterInterface{
				IpRange: "",
				IpVersion: "",
				LinkedInterconnectAttachment: "",
				LinkedVpnTunnel: "",
				ManagementType: "",
				Name: "",
				PrivateIpAddress: "",
				RedundantInterface: "",
				Subnetwork: "",
			}
			Kind: "",
			Md5AuthenticationKeys: &computepb.RouterMd5AuthenticationKey{
				Key: "",
				Name: "",
			}
			Name: "",
			Nats: &computepb.RouterNat{
				AutoNetworkTier: "",
				DrainNatIps: "",
				EnableDynamicPortAllocation: "",
				EnableEndpointIndependentMapping: "",
				EndpointTypes: "",
				IcmpIdleTimeoutSec: "",
				LogConfig: &computepb.RouterNatLogConfig{...}
				MaxPortsPerVm: "",
				MinPortsPerVm: "",
				Name: "",
				NatIpAllocateOption: "",
				NatIps: "",
				Rules: &computepb.RouterNatRule{...}
				SourceSubnetworkIpRangesToNat: "",
				Subnetworks: &computepb.RouterNatSubnetworkToNat{...}
				TcpEstablishedIdleTimeoutSec: "",
				TcpTimeWaitTimeoutSec: "",
				TcpTransitoryIdleTimeoutSec: "",
				Type: "",
				UdpIdleTimeoutSec: "",
			}
			Network: "",
			Region: "",
			SelfLink: "",
		}
	}
	resp, err := c.Insert(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRoutersClient_List() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#ListRoutersRequest.
	req := &computepb.ListRoutersRequest{
		Filter: "",
		MaxResults: "",
		OrderBy: "",
		PageToken: "",
		Project: "",
		Region: "",
		ReturnPartialSuccess: "",
	}
	it := c.List(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp

		// If you need to access the underlying RPC response,
		// you can do so by casting the `Response` as below.
		// Otherwise, remove this line. Only populated after
		// first call to Next(). Not safe for concurrent access.
		_ = it.Response.(*computepb.RouterList)
	}
}

func ExampleRoutersClient_Patch() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#PatchRouterRequest.
	req := &computepb.PatchRouterRequest{
		Project: "",
		Region: "",
		RequestId: "",
		Router: "",
		RouterResource: &computepb.Router{
			Bgp: &computepb.RouterBgp{
				AdvertiseMode: "",
				AdvertisedGroups: "",
				AdvertisedIpRanges: &computepb.RouterAdvertisedIpRange{...}
				Asn: "",
				IdentifierRange: "",
				KeepaliveInterval: "",
			}
			BgpPeers: &computepb.RouterBgpPeer{
				AdvertiseMode: "",
				AdvertisedGroups: "",
				AdvertisedIpRanges: &computepb.RouterAdvertisedIpRange{...}
				AdvertisedRoutePriority: "",
				Bfd: &computepb.RouterBgpPeerBfd{...}
				CustomLearnedIpRanges: &computepb.RouterBgpPeerCustomLearnedIpRange{...}
				CustomLearnedRoutePriority: "",
				Enable: "",
				EnableIpv4: "",
				EnableIpv6: "",
				ExportPolicies: "",
				ImportPolicies: "",
				InterfaceName: "",
				IpAddress: "",
				Ipv4NexthopAddress: "",
				Ipv6NexthopAddress: "",
				ManagementType: "",
				Md5AuthenticationKeyName: "",
				Name: "",
				PeerAsn: "",
				PeerIpAddress: "",
				PeerIpv4NexthopAddress: "",
				PeerIpv6NexthopAddress: "",
				RouterApplianceInstance: "",
			}
			CreationTimestamp: "",
			Description: "",
			EncryptedInterconnectRouter: "",
			Id: "",
			Interfaces: &computepb.RouterInterface{
				IpRange: "",
				IpVersion: "",
				LinkedInterconnectAttachment: "",
				LinkedVpnTunnel: "",
				ManagementType: "",
				Name: "",
				PrivateIpAddress: "",
				RedundantInterface: "",
				Subnetwork: "",
			}
			Kind: "",
			Md5AuthenticationKeys: &computepb.RouterMd5AuthenticationKey{
				Key: "",
				Name: "",
			}
			Name: "",
			Nats: &computepb.RouterNat{
				AutoNetworkTier: "",
				DrainNatIps: "",
				EnableDynamicPortAllocation: "",
				EnableEndpointIndependentMapping: "",
				EndpointTypes: "",
				IcmpIdleTimeoutSec: "",
				LogConfig: &computepb.RouterNatLogConfig{...}
				MaxPortsPerVm: "",
				MinPortsPerVm: "",
				Name: "",
				NatIpAllocateOption: "",
				NatIps: "",
				Rules: &computepb.RouterNatRule{...}
				SourceSubnetworkIpRangesToNat: "",
				Subnetworks: &computepb.RouterNatSubnetworkToNat{...}
				TcpEstablishedIdleTimeoutSec: "",
				TcpTimeWaitTimeoutSec: "",
				TcpTransitoryIdleTimeoutSec: "",
				Type: "",
				UdpIdleTimeoutSec: "",
			}
			Network: "",
			Region: "",
			SelfLink: "",
		}
	}
	resp, err := c.Patch(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRoutersClient_Preview() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#PreviewRouterRequest.
	req := &computepb.PreviewRouterRequest{
		Project: "",
		Region: "",
		Router: "",
		RouterResource: &computepb.Router{
			Bgp: &computepb.RouterBgp{
				AdvertiseMode: "",
				AdvertisedGroups: "",
				AdvertisedIpRanges: &computepb.RouterAdvertisedIpRange{...}
				Asn: "",
				IdentifierRange: "",
				KeepaliveInterval: "",
			}
			BgpPeers: &computepb.RouterBgpPeer{
				AdvertiseMode: "",
				AdvertisedGroups: "",
				AdvertisedIpRanges: &computepb.RouterAdvertisedIpRange{...}
				AdvertisedRoutePriority: "",
				Bfd: &computepb.RouterBgpPeerBfd{...}
				CustomLearnedIpRanges: &computepb.RouterBgpPeerCustomLearnedIpRange{...}
				CustomLearnedRoutePriority: "",
				Enable: "",
				EnableIpv4: "",
				EnableIpv6: "",
				ExportPolicies: "",
				ImportPolicies: "",
				InterfaceName: "",
				IpAddress: "",
				Ipv4NexthopAddress: "",
				Ipv6NexthopAddress: "",
				ManagementType: "",
				Md5AuthenticationKeyName: "",
				Name: "",
				PeerAsn: "",
				PeerIpAddress: "",
				PeerIpv4NexthopAddress: "",
				PeerIpv6NexthopAddress: "",
				RouterApplianceInstance: "",
			}
			CreationTimestamp: "",
			Description: "",
			EncryptedInterconnectRouter: "",
			Id: "",
			Interfaces: &computepb.RouterInterface{
				IpRange: "",
				IpVersion: "",
				LinkedInterconnectAttachment: "",
				LinkedVpnTunnel: "",
				ManagementType: "",
				Name: "",
				PrivateIpAddress: "",
				RedundantInterface: "",
				Subnetwork: "",
			}
			Kind: "",
			Md5AuthenticationKeys: &computepb.RouterMd5AuthenticationKey{
				Key: "",
				Name: "",
			}
			Name: "",
			Nats: &computepb.RouterNat{
				AutoNetworkTier: "",
				DrainNatIps: "",
				EnableDynamicPortAllocation: "",
				EnableEndpointIndependentMapping: "",
				EndpointTypes: "",
				IcmpIdleTimeoutSec: "",
				LogConfig: &computepb.RouterNatLogConfig{...}
				MaxPortsPerVm: "",
				MinPortsPerVm: "",
				Name: "",
				NatIpAllocateOption: "",
				NatIps: "",
				Rules: &computepb.RouterNatRule{...}
				SourceSubnetworkIpRangesToNat: "",
				Subnetworks: &computepb.RouterNatSubnetworkToNat{...}
				TcpEstablishedIdleTimeoutSec: "",
				TcpTimeWaitTimeoutSec: "",
				TcpTransitoryIdleTimeoutSec: "",
				Type: "",
				UdpIdleTimeoutSec: "",
			}
			Network: "",
			Region: "",
			SelfLink: "",
		}
	}
	resp, err := c.Preview(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRoutersClient_Update() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRoutersClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#UpdateRouterRequest.
	req := &computepb.UpdateRouterRequest{
		Project: "",
		Region: "",
		RequestId: "",
		Router: "",
		RouterResource: &computepb.Router{
			Bgp: &computepb.RouterBgp{
				AdvertiseMode: "",
				AdvertisedGroups: "",
				AdvertisedIpRanges: &computepb.RouterAdvertisedIpRange{...}
				Asn: "",
				IdentifierRange: "",
				KeepaliveInterval: "",
			}
			BgpPeers: &computepb.RouterBgpPeer{
				AdvertiseMode: "",
				AdvertisedGroups: "",
				AdvertisedIpRanges: &computepb.RouterAdvertisedIpRange{...}
				AdvertisedRoutePriority: "",
				Bfd: &computepb.RouterBgpPeerBfd{...}
				CustomLearnedIpRanges: &computepb.RouterBgpPeerCustomLearnedIpRange{...}
				CustomLearnedRoutePriority: "",
				Enable: "",
				EnableIpv4: "",
				EnableIpv6: "",
				ExportPolicies: "",
				ImportPolicies: "",
				InterfaceName: "",
				IpAddress: "",
				Ipv4NexthopAddress: "",
				Ipv6NexthopAddress: "",
				ManagementType: "",
				Md5AuthenticationKeyName: "",
				Name: "",
				PeerAsn: "",
				PeerIpAddress: "",
				PeerIpv4NexthopAddress: "",
				PeerIpv6NexthopAddress: "",
				RouterApplianceInstance: "",
			}
			CreationTimestamp: "",
			Description: "",
			EncryptedInterconnectRouter: "",
			Id: "",
			Interfaces: &computepb.RouterInterface{
				IpRange: "",
				IpVersion: "",
				LinkedInterconnectAttachment: "",
				LinkedVpnTunnel: "",
				ManagementType: "",
				Name: "",
				PrivateIpAddress: "",
				RedundantInterface: "",
				Subnetwork: "",
			}
			Kind: "",
			Md5AuthenticationKeys: &computepb.RouterMd5AuthenticationKey{
				Key: "",
				Name: "",
			}
			Name: "",
			Nats: &computepb.RouterNat{
				AutoNetworkTier: "",
				DrainNatIps: "",
				EnableDynamicPortAllocation: "",
				EnableEndpointIndependentMapping: "",
				EndpointTypes: "",
				IcmpIdleTimeoutSec: "",
				LogConfig: &computepb.RouterNatLogConfig{...}
				MaxPortsPerVm: "",
				MinPortsPerVm: "",
				Name: "",
				NatIpAllocateOption: "",
				NatIps: "",
				Rules: &computepb.RouterNatRule{...}
				SourceSubnetworkIpRangesToNat: "",
				Subnetworks: &computepb.RouterNatSubnetworkToNat{...}
				TcpEstablishedIdleTimeoutSec: "",
				TcpTimeWaitTimeoutSec: "",
				TcpTransitoryIdleTimeoutSec: "",
				Type: "",
				UdpIdleTimeoutSec: "",
			}
			Network: "",
			Region: "",
			SelfLink: "",
		}
	}
	resp, err := c.Update(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}
