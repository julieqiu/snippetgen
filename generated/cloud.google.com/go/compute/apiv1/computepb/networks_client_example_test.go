// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.


package computepb_test

import (
	"context"

	computepb "cloud.google.com/go/compute/apiv1/computepb"
	"google.golang.org/api/iterator"
)

func ExampleNewNetworksClient() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Use client.
	_ = c
}

func ExampleNetworksClient_AddPeering() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#AddPeeringNetworkRequest.
	req := &computepb.AddPeeringNetworkRequest{
		Network: "",
		NetworksAddPeeringRequestResource: &computepb.NetworksAddPeeringRequest{
			AutoCreateRoutes: "",
			Name: "",
			NetworkPeering: &computepb.NetworkPeering{
				AutoCreateRoutes: "",
				ExchangeSubnetRoutes: "",
				ExportCustomRoutes: "",
				ExportSubnetRoutesWithPublicIp: "",
				ImportCustomRoutes: "",
				ImportSubnetRoutesWithPublicIp: "",
				Name: "",
				Network: "",
				PeerMtu: "",
				StackType: "",
				State: "",
				StateDetails: "",
			}
			PeerNetwork: "",
		}
		Project: "",
		RequestId: "",
	}
	resp, err := c.AddPeering(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleNetworksClient_Delete() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#DeleteNetworkRequest.
	req := &computepb.DeleteNetworkRequest{
		Network: "",
		Project: "",
		RequestId: "",
	}
	resp, err := c.Delete(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleNetworksClient_Get() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#GetNetworkRequest.
	req := &computepb.GetNetworkRequest{
		Network: "",
		Project: "",
	}
	resp, err := c.Get(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleNetworksClient_GetEffectiveFirewalls() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#GetEffectiveFirewallsNetworkRequest.
	req := &computepb.GetEffectiveFirewallsNetworkRequest{
		Network: "",
		Project: "",
	}
	resp, err := c.GetEffectiveFirewalls(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleNetworksClient_Insert() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#InsertNetworkRequest.
	req := &computepb.InsertNetworkRequest{
		NetworkResource: &computepb.Network{
			IPv4Range: "",
			AutoCreateSubnetworks: "",
			CreationTimestamp: "",
			Description: "",
			EnableUlaInternalIpv6: "",
			FirewallPolicy: "",
			GatewayIPv4: "",
			Id: "",
			InternalIpv6Range: "",
			Kind: "",
			Mtu: "",
			Name: "",
			NetworkFirewallPolicyEnforcementOrder: "",
			Peerings: &computepb.NetworkPeering{
				AutoCreateRoutes: "",
				ExchangeSubnetRoutes: "",
				ExportCustomRoutes: "",
				ExportSubnetRoutesWithPublicIp: "",
				ImportCustomRoutes: "",
				ImportSubnetRoutesWithPublicIp: "",
				Name: "",
				Network: "",
				PeerMtu: "",
				StackType: "",
				State: "",
				StateDetails: "",
			}
			RoutingConfig: &computepb.NetworkRoutingConfig{
				RoutingMode: "",
			}
			SelfLink: "",
			SelfLinkWithId: "",
			Subnetworks: "",
		}
		Project: "",
		RequestId: "",
	}
	resp, err := c.Insert(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleNetworksClient_List() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#ListNetworksRequest.
	req := &computepb.ListNetworksRequest{
		Filter: "",
		MaxResults: "",
		OrderBy: "",
		PageToken: "",
		Project: "",
		ReturnPartialSuccess: "",
	}
	it := c.List(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp

		// If you need to access the underlying RPC response,
		// you can do so by casting the `Response` as below.
		// Otherwise, remove this line. Only populated after
		// first call to Next(). Not safe for concurrent access.
		_ = it.Response.(*computepb.NetworkList)
	}
}

func ExampleNetworksClient_ListPeeringRoutes() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#ListPeeringRoutesNetworksRequest.
	req := &computepb.ListPeeringRoutesNetworksRequest{
		Direction: "",
		Filter: "",
		MaxResults: "",
		Network: "",
		OrderBy: "",
		PageToken: "",
		PeeringName: "",
		Project: "",
		Region: "",
		ReturnPartialSuccess: "",
	}
	it := c.ListPeeringRoutes(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp

		// If you need to access the underlying RPC response,
		// you can do so by casting the `Response` as below.
		// Otherwise, remove this line. Only populated after
		// first call to Next(). Not safe for concurrent access.
		_ = it.Response.(*computepb.ExchangedPeeringRoutesList)
	}
}

func ExampleNetworksClient_Patch() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#PatchNetworkRequest.
	req := &computepb.PatchNetworkRequest{
		Network: "",
		NetworkResource: &computepb.Network{
			IPv4Range: "",
			AutoCreateSubnetworks: "",
			CreationTimestamp: "",
			Description: "",
			EnableUlaInternalIpv6: "",
			FirewallPolicy: "",
			GatewayIPv4: "",
			Id: "",
			InternalIpv6Range: "",
			Kind: "",
			Mtu: "",
			Name: "",
			NetworkFirewallPolicyEnforcementOrder: "",
			Peerings: &computepb.NetworkPeering{
				AutoCreateRoutes: "",
				ExchangeSubnetRoutes: "",
				ExportCustomRoutes: "",
				ExportSubnetRoutesWithPublicIp: "",
				ImportCustomRoutes: "",
				ImportSubnetRoutesWithPublicIp: "",
				Name: "",
				Network: "",
				PeerMtu: "",
				StackType: "",
				State: "",
				StateDetails: "",
			}
			RoutingConfig: &computepb.NetworkRoutingConfig{
				RoutingMode: "",
			}
			SelfLink: "",
			SelfLinkWithId: "",
			Subnetworks: "",
		}
		Project: "",
		RequestId: "",
	}
	resp, err := c.Patch(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleNetworksClient_RemovePeering() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#RemovePeeringNetworkRequest.
	req := &computepb.RemovePeeringNetworkRequest{
		Network: "",
		NetworksRemovePeeringRequestResource: &computepb.NetworksRemovePeeringRequest{
			Name: "",
		}
		Project: "",
		RequestId: "",
	}
	resp, err := c.RemovePeering(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleNetworksClient_SwitchToCustomMode() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#SwitchToCustomModeNetworkRequest.
	req := &computepb.SwitchToCustomModeNetworkRequest{
		Network: "",
		Project: "",
		RequestId: "",
	}
	resp, err := c.SwitchToCustomMode(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleNetworksClient_UpdatePeering() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewNetworksClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#UpdatePeeringNetworkRequest.
	req := &computepb.UpdatePeeringNetworkRequest{
		Network: "",
		NetworksUpdatePeeringRequestResource: &computepb.NetworksUpdatePeeringRequest{
			NetworkPeering: &computepb.NetworkPeering{
				AutoCreateRoutes: "",
				ExchangeSubnetRoutes: "",
				ExportCustomRoutes: "",
				ExportSubnetRoutesWithPublicIp: "",
				ImportCustomRoutes: "",
				ImportSubnetRoutesWithPublicIp: "",
				Name: "",
				Network: "",
				PeerMtu: "",
				StackType: "",
				State: "",
				StateDetails: "",
			}
		}
		Project: "",
		RequestId: "",
	}
	resp, err := c.UpdatePeering(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}
