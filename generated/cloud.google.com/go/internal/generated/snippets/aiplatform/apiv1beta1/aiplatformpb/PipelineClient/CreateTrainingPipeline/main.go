// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

// [START aiplatform_v1beta1_generated_PipelineService_CreateTrainingPipeline_sync]

package main

import (
	"context"

	aiplatformpb "cloud.google.com/go/aiplatform/apiv1beta1/aiplatformpb"
)

func main() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := aiplatformpb.NewPipelineClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/aiplatform/apiv1beta1/aiplatformpb#CreateTrainingPipelineRequest.
	req := &aiplatformpb.CreateTrainingPipelineRequest{
		Parent: "",
		TrainingPipeline: &aiplatformpb.TrainingPipeline{
			Name: "",
			DisplayName: "",
			InputDataConfig: &aiplatformpb.InputDataConfig{
				FractionSplit: &aiplatformpb.FractionSplit{...}
				FilterSplit: &aiplatformpb.FilterSplit{...}
				PredefinedSplit: &aiplatformpb.PredefinedSplit{...}
				TimestampSplit: &aiplatformpb.TimestampSplit{...}
				StratifiedSplit: &aiplatformpb.StratifiedSplit{...}
				GcsDestination: &aiplatformpb.GcsDestination{...}
				BigqueryDestination: &aiplatformpb.BigQueryDestination{...}
				DatasetId: "",
				AnnotationsFilter: "",
				AnnotationSchemaUri: "",
				SavedQueryId: "",
				PersistMlUseAssignment: "",
			}
			TrainingTaskDefinition: "",
			TrainingTaskInputs: &aiplatformpb.Value{
				IntValue: "",
				DoubleValue: "",
				StringValue: "",
			}
			TrainingTaskMetadata: &aiplatformpb.Value{
				IntValue: "",
				DoubleValue: "",
				StringValue: "",
			}
			ModelToUpload: &aiplatformpb.Model{
				Name: "",
				VersionId: "",
				VersionAliases: "",
				VersionCreateTime: &timestamppb.Timestamp{...}
				VersionUpdateTime: &timestamppb.Timestamp{...}
				DisplayName: "",
				Description: "",
				VersionDescription: "",
				PredictSchemata: &aiplatformpb.PredictSchemata{...}
				MetadataSchemaUri: "",
				Metadata: &aiplatformpb.Value{...}
				SupportedExportFormats: "",
				TrainingPipeline: "",
				ContainerSpec: &aiplatformpb.ModelContainerSpec{...}
				ArtifactUri: "",
				SupportedDeploymentResourcesTypes: "",
				SupportedInputStorageFormats: "",
				SupportedOutputStorageFormats: "",
				CreateTime: &timestamppb.Timestamp{...}
				UpdateTime: &timestamppb.Timestamp{...}
				DeployedModels: &aiplatformpb.DeployedModelRef{...}
				ExplanationSpec: &aiplatformpb.ExplanationSpec{...}
				Etag: "",
				Labels: "",
				EncryptionSpec: &aiplatformpb.EncryptionSpec{...}
				ModelSourceInfo: &aiplatformpb.ModelSourceInfo{...}
				OriginalModelInfo: "",
				MetadataArtifact: "",
				BaseModelSource: "",
			}
			ModelId: "",
			ParentModel: "",
			State: "",
			Error: &statuspb.Status{
				Code: "",
				Message: "",
				Details: &anypb.Any{...}
			}
			CreateTime: &timestamppb.Timestamp{
				Seconds: "",
				Nanos: "",
			}
			StartTime: &timestamppb.Timestamp{
				Seconds: "",
				Nanos: "",
			}
			EndTime: &timestamppb.Timestamp{
				Seconds: "",
				Nanos: "",
			}
			UpdateTime: &timestamppb.Timestamp{
				Seconds: "",
				Nanos: "",
			}
			Labels: "",
			EncryptionSpec: &aiplatformpb.EncryptionSpec{
				KmsKeyName: "",
			}
		}
	}
	resp, err := c.CreateTrainingPipeline(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

// [END aiplatform_v1beta1_generated_PipelineService_CreateTrainingPipeline_sync]
