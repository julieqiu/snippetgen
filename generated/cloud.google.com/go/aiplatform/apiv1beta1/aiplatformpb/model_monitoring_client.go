// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.


package aiplatformpb

import (
	"context"
	"fmt"
	"math"
	"net/url"

	aiplatformpb "cloud.google.com/go/aiplatform/apiv1beta1/aiplatformpb"
	iampb "cloud.google.com/go/iam/apiv1/iampb"
	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	locationpb "google.golang.org/genproto/googleapis/cloud/location"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/proto"
)

var newModelMonitoringClientHook clientHook

// ModelMonitoringCallOptions contains the retry settings for each method of ModelMonitoringClient.
type ModelMonitoringCallOptions struct {
	CreateModelMonitor []gax.CallOption
	UpdateModelMonitor []gax.CallOption
	GetModelMonitor []gax.CallOption
	ListModelMonitors []gax.CallOption
	DeleteModelMonitor []gax.CallOption
	CreateModelMonitoringJob []gax.CallOption
	GetModelMonitoringJob []gax.CallOption
	ListModelMonitoringJobs []gax.CallOption
	DeleteModelMonitoringJob []gax.CallOption
	SearchModelMonitoringStats []gax.CallOption
	SearchModelMonitoringAlerts []gax.CallOption
	GetLocation []gax.CallOption
	ListLocations []gax.CallOption
	GetIamPolicy []gax.CallOption
	SetIamPolicy []gax.CallOption
	TestIamPermissions []gax.CallOption
	CancelOperation []gax.CallOption
	DeleteOperation []gax.CallOption
	GetOperation []gax.CallOption
	ListOperations []gax.CallOption
	WaitOperation []gax.CallOption
}

func defaultModelMonitoringGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("aiplatform.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("aiplatform.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("aiplatform.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://aiplatform.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
		grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultModelMonitoringCallOptions() *ModelMonitoringCallOptions {
	return &ModelMonitoringCallOptions{
		CreateModelMonitor: []gax.CallOption{
		},
		UpdateModelMonitor: []gax.CallOption{
		},
		GetModelMonitor: []gax.CallOption{
		},
		ListModelMonitors: []gax.CallOption{
		},
		DeleteModelMonitor: []gax.CallOption{
		},
		CreateModelMonitoringJob: []gax.CallOption{
		},
		GetModelMonitoringJob: []gax.CallOption{
		},
		ListModelMonitoringJobs: []gax.CallOption{
		},
		DeleteModelMonitoringJob: []gax.CallOption{
		},
		SearchModelMonitoringStats: []gax.CallOption{
		},
		SearchModelMonitoringAlerts: []gax.CallOption{
		},
		GetLocation: []gax.CallOption{
		},
		ListLocations: []gax.CallOption{
		},
		GetIamPolicy: []gax.CallOption{
		},
		SetIamPolicy: []gax.CallOption{
		},
		TestIamPermissions: []gax.CallOption{
		},
		CancelOperation: []gax.CallOption{
		},
		DeleteOperation: []gax.CallOption{
		},
		GetOperation: []gax.CallOption{
		},
		ListOperations: []gax.CallOption{
		},
		WaitOperation: []gax.CallOption{
		},
	}
}

// internalModelMonitoringClient is an interface that defines the methods available from Vertex AI API.
type internalModelMonitoringClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	CreateModelMonitor(context.Context, *aiplatformpb.CreateModelMonitorRequest, ...gax.CallOption) (*CreateModelMonitorOperation, error)
	CreateModelMonitorOperation(name string) *CreateModelMonitorOperation
	UpdateModelMonitor(context.Context, *aiplatformpb.UpdateModelMonitorRequest, ...gax.CallOption) (*UpdateModelMonitorOperation, error)
	UpdateModelMonitorOperation(name string) *UpdateModelMonitorOperation
	GetModelMonitor(context.Context, *aiplatformpb.GetModelMonitorRequest, ...gax.CallOption) (*aiplatformpb.ModelMonitor, error)
	ListModelMonitors(context.Context, *aiplatformpb.ListModelMonitorsRequest, ...gax.CallOption) *ModelMonitorIterator
	DeleteModelMonitor(context.Context, *aiplatformpb.DeleteModelMonitorRequest, ...gax.CallOption) (*DeleteModelMonitorOperation, error)
	DeleteModelMonitorOperation(name string) *DeleteModelMonitorOperation
	CreateModelMonitoringJob(context.Context, *aiplatformpb.CreateModelMonitoringJobRequest, ...gax.CallOption) (*aiplatformpb.ModelMonitoringJob, error)
	GetModelMonitoringJob(context.Context, *aiplatformpb.GetModelMonitoringJobRequest, ...gax.CallOption) (*aiplatformpb.ModelMonitoringJob, error)
	ListModelMonitoringJobs(context.Context, *aiplatformpb.ListModelMonitoringJobsRequest, ...gax.CallOption) *ModelMonitoringJobIterator
	DeleteModelMonitoringJob(context.Context, *aiplatformpb.DeleteModelMonitoringJobRequest, ...gax.CallOption) (*DeleteModelMonitoringJobOperation, error)
	DeleteModelMonitoringJobOperation(name string) *DeleteModelMonitoringJobOperation
	SearchModelMonitoringStats(context.Context, *aiplatformpb.SearchModelMonitoringStatsRequest, ...gax.CallOption) *ModelMonitoringStatsIterator
	SearchModelMonitoringAlerts(context.Context, *aiplatformpb.SearchModelMonitoringAlertsRequest, ...gax.CallOption) *ModelMonitoringAlertIterator
	GetLocation(context.Context, *locationpb.GetLocationRequest, ...gax.CallOption) (*locationpb.Location, error)
	ListLocations(context.Context, *locationpb.ListLocationsRequest, ...gax.CallOption) *LocationIterator
	GetIamPolicy(context.Context, *iampb.GetIamPolicyRequest, ...gax.CallOption) (*iampb.Policy, error)
	SetIamPolicy(context.Context, *iampb.SetIamPolicyRequest, ...gax.CallOption) (*iampb.Policy, error)
	TestIamPermissions(context.Context, *iampb.TestIamPermissionsRequest, ...gax.CallOption) (*iampb.TestIamPermissionsResponse, error)
	CancelOperation(context.Context, *longrunningpb.CancelOperationRequest, ...gax.CallOption) error
	DeleteOperation(context.Context, *longrunningpb.DeleteOperationRequest, ...gax.CallOption) error
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest, ...gax.CallOption) *OperationIterator
	WaitOperation(context.Context, *longrunningpb.WaitOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
}

// ModelMonitoringClient is a client for interacting with Vertex AI API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// A service for creating and managing Vertex AI Model moitoring. This includes
// ModelMonitor resources, ModelMonitoringJob resources.
type ModelMonitoringClient struct {
	// The internal transport-dependent client.
	internalClient internalModelMonitoringClient

	// The call options for this service.
	CallOptions *ModelMonitoringCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient

}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *ModelMonitoringClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *ModelMonitoringClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *ModelMonitoringClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// CreateModelMonitor creates a ModelMonitor.
func (c *ModelMonitoringClient) CreateModelMonitor(ctx context.Context, req *aiplatformpb.CreateModelMonitorRequest, opts ...gax.CallOption) (*CreateModelMonitorOperation, error) {
	return c.internalClient.CreateModelMonitor(ctx, req, opts...)
}

// CreateModelMonitorOperation returns a new CreateModelMonitorOperation from a given name.
// The name must be that of a previously created CreateModelMonitorOperation, possibly from a different process.
func (c *ModelMonitoringClient) CreateModelMonitorOperation(name string) *CreateModelMonitorOperation {
	return c.internalClient.CreateModelMonitorOperation(name)
}

// UpdateModelMonitor updates a ModelMonitor.
func (c *ModelMonitoringClient) UpdateModelMonitor(ctx context.Context, req *aiplatformpb.UpdateModelMonitorRequest, opts ...gax.CallOption) (*UpdateModelMonitorOperation, error) {
	return c.internalClient.UpdateModelMonitor(ctx, req, opts...)
}

// UpdateModelMonitorOperation returns a new UpdateModelMonitorOperation from a given name.
// The name must be that of a previously created UpdateModelMonitorOperation, possibly from a different process.
func (c *ModelMonitoringClient) UpdateModelMonitorOperation(name string) *UpdateModelMonitorOperation {
	return c.internalClient.UpdateModelMonitorOperation(name)
}

// GetModelMonitor gets a ModelMonitor.
func (c *ModelMonitoringClient) GetModelMonitor(ctx context.Context, req *aiplatformpb.GetModelMonitorRequest, opts ...gax.CallOption) (*aiplatformpb.ModelMonitor, error) {
	return c.internalClient.GetModelMonitor(ctx, req, opts...)
}

// ListModelMonitors lists ModelMonitors in a Location.
func (c *ModelMonitoringClient) ListModelMonitors(ctx context.Context, req *aiplatformpb.ListModelMonitorsRequest, opts ...gax.CallOption) *ModelMonitorIterator {
	return c.internalClient.ListModelMonitors(ctx, req, opts...)
}

// DeleteModelMonitor deletes a ModelMonitor.
func (c *ModelMonitoringClient) DeleteModelMonitor(ctx context.Context, req *aiplatformpb.DeleteModelMonitorRequest, opts ...gax.CallOption) (*DeleteModelMonitorOperation, error) {
	return c.internalClient.DeleteModelMonitor(ctx, req, opts...)
}

// DeleteModelMonitorOperation returns a new DeleteModelMonitorOperation from a given name.
// The name must be that of a previously created DeleteModelMonitorOperation, possibly from a different process.
func (c *ModelMonitoringClient) DeleteModelMonitorOperation(name string) *DeleteModelMonitorOperation {
	return c.internalClient.DeleteModelMonitorOperation(name)
}

// CreateModelMonitoringJob creates a ModelMonitoringJob.
func (c *ModelMonitoringClient) CreateModelMonitoringJob(ctx context.Context, req *aiplatformpb.CreateModelMonitoringJobRequest, opts ...gax.CallOption) (*aiplatformpb.ModelMonitoringJob, error) {
	return c.internalClient.CreateModelMonitoringJob(ctx, req, opts...)
}

// GetModelMonitoringJob gets a ModelMonitoringJob.
func (c *ModelMonitoringClient) GetModelMonitoringJob(ctx context.Context, req *aiplatformpb.GetModelMonitoringJobRequest, opts ...gax.CallOption) (*aiplatformpb.ModelMonitoringJob, error) {
	return c.internalClient.GetModelMonitoringJob(ctx, req, opts...)
}

// ListModelMonitoringJobs lists ModelMonitoringJobs.
// Callers may choose to read across multiple Monitors as per
// AIP-159 (at https://google.aip.dev/159) by using ‘-’ (the hyphen or dash
// character) as a wildcard character instead of modelMonitor id in the
// parent. Format
// projects/{project_id}/locations/{location}/moodelMonitors/-/modelMonitoringJobs
func (c *ModelMonitoringClient) ListModelMonitoringJobs(ctx context.Context, req *aiplatformpb.ListModelMonitoringJobsRequest, opts ...gax.CallOption) *ModelMonitoringJobIterator {
	return c.internalClient.ListModelMonitoringJobs(ctx, req, opts...)
}

// DeleteModelMonitoringJob deletes a ModelMonitoringJob.
func (c *ModelMonitoringClient) DeleteModelMonitoringJob(ctx context.Context, req *aiplatformpb.DeleteModelMonitoringJobRequest, opts ...gax.CallOption) (*DeleteModelMonitoringJobOperation, error) {
	return c.internalClient.DeleteModelMonitoringJob(ctx, req, opts...)
}

// DeleteModelMonitoringJobOperation returns a new DeleteModelMonitoringJobOperation from a given name.
// The name must be that of a previously created DeleteModelMonitoringJobOperation, possibly from a different process.
func (c *ModelMonitoringClient) DeleteModelMonitoringJobOperation(name string) *DeleteModelMonitoringJobOperation {
	return c.internalClient.DeleteModelMonitoringJobOperation(name)
}

// SearchModelMonitoringStats searches Model Monitoring Stats generated within a given time window.
func (c *ModelMonitoringClient) SearchModelMonitoringStats(ctx context.Context, req *aiplatformpb.SearchModelMonitoringStatsRequest, opts ...gax.CallOption) *ModelMonitoringStatsIterator {
	return c.internalClient.SearchModelMonitoringStats(ctx, req, opts...)
}

// SearchModelMonitoringAlerts returns the Model Monitoring alerts.
func (c *ModelMonitoringClient) SearchModelMonitoringAlerts(ctx context.Context, req *aiplatformpb.SearchModelMonitoringAlertsRequest, opts ...gax.CallOption) *ModelMonitoringAlertIterator {
	return c.internalClient.SearchModelMonitoringAlerts(ctx, req, opts...)
}

// GetLocation gets information about a location.
func (c *ModelMonitoringClient) GetLocation(ctx context.Context, req *locationpb.GetLocationRequest, opts ...gax.CallOption) (*locationpb.Location, error) {
	return c.internalClient.GetLocation(ctx, req, opts...)
}

// ListLocations lists information about the supported locations for this service.
func (c *ModelMonitoringClient) ListLocations(ctx context.Context, req *locationpb.ListLocationsRequest, opts ...gax.CallOption) *LocationIterator {
	return c.internalClient.ListLocations(ctx, req, opts...)
}

// GetIamPolicy gets the access control policy for a resource. Returns an empty policy
// if the resource exists and does not have a policy set.
func (c *ModelMonitoringClient) GetIamPolicy(ctx context.Context, req *iampb.GetIamPolicyRequest, opts ...gax.CallOption) (*iampb.Policy, error) {
	return c.internalClient.GetIamPolicy(ctx, req, opts...)
}

// SetIamPolicy sets the access control policy on the specified resource. Replaces
// any existing policy.
//
// Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED
// errors.
func (c *ModelMonitoringClient) SetIamPolicy(ctx context.Context, req *iampb.SetIamPolicyRequest, opts ...gax.CallOption) (*iampb.Policy, error) {
	return c.internalClient.SetIamPolicy(ctx, req, opts...)
}

// TestIamPermissions returns permissions that a caller has on the specified resource. If the
// resource does not exist, this will return an empty set of
// permissions, not a NOT_FOUND error.
//
// Note: This operation is designed to be used for building
// permission-aware UIs and command-line tools, not for authorization
// checking. This operation may “fail open” without warning.
func (c *ModelMonitoringClient) TestIamPermissions(ctx context.Context, req *iampb.TestIamPermissionsRequest, opts ...gax.CallOption) (*iampb.TestIamPermissionsResponse, error) {
	return c.internalClient.TestIamPermissions(ctx, req, opts...)
}

// CancelOperation is a utility method from google.longrunning.Operations.
func (c *ModelMonitoringClient) CancelOperation(ctx context.Context, req *longrunningpb.CancelOperationRequest, opts ...gax.CallOption) error {
	return c.internalClient.CancelOperation(ctx, req, opts...)
}

// DeleteOperation is a utility method from google.longrunning.Operations.
func (c *ModelMonitoringClient) DeleteOperation(ctx context.Context, req *longrunningpb.DeleteOperationRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteOperation(ctx, req, opts...)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *ModelMonitoringClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.GetOperation(ctx, req, opts...)
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *ModelMonitoringClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	return c.internalClient.ListOperations(ctx, req, opts...)
}

// WaitOperation is a utility method from google.longrunning.Operations.
func (c *ModelMonitoringClient) WaitOperation(ctx context.Context, req *longrunningpb.WaitOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.WaitOperation(ctx, req, opts...)
}

// modelMonitoringGRPCClient is a client for interacting with Vertex AI API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type modelMonitoringGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing ModelMonitoringClient
	CallOptions **ModelMonitoringCallOptions

	// The gRPC API client.
	modelMonitoringClient aiplatformpb.ModelMonitoringServiceClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	operationsClient longrunningpb.OperationsClient

	iamPolicyClient iampb.IAMPolicyClient

	locationsClient locationpb.LocationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewModelMonitoringClient creates a new model monitoring service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// A service for creating and managing Vertex AI Model moitoring. This includes
// ModelMonitor resources, ModelMonitoringJob resources.
func NewModelMonitoringClient(ctx context.Context, opts ...option.ClientOption) (*ModelMonitoringClient, error) {
	clientOpts := defaultModelMonitoringGRPCClientOptions()
	if newModelMonitoringClientHook != nil {
		hookOpts, err := newModelMonitoringClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := ModelMonitoringClient{CallOptions: defaultModelMonitoringCallOptions()}

	c := &modelMonitoringGRPCClient{
		connPool:    connPool,
		modelMonitoringClient: aiplatformpb.NewModelMonitoringServiceClient(connPool),
		CallOptions: &client.CallOptions,
		operationsClient: longrunningpb.NewOperationsClient(connPool),
		iamPolicyClient: iampb.NewIAMPolicyClient(connPool),
		locationsClient: locationpb.NewLocationsClient(connPool),

	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *modelMonitoringGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *modelMonitoringGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *modelMonitoringGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *modelMonitoringGRPCClient) CreateModelMonitor(ctx context.Context, req *aiplatformpb.CreateModelMonitorRequest, opts ...gax.CallOption) (*CreateModelMonitorOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateModelMonitor[0:len((*c.CallOptions).CreateModelMonitor):len((*c.CallOptions).CreateModelMonitor)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.modelMonitoringClient.CreateModelMonitor(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateModelMonitorOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *modelMonitoringGRPCClient) UpdateModelMonitor(ctx context.Context, req *aiplatformpb.UpdateModelMonitorRequest, opts ...gax.CallOption) (*UpdateModelMonitorOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "model_monitor.name", url.QueryEscape(req.GetModelMonitor().GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UpdateModelMonitor[0:len((*c.CallOptions).UpdateModelMonitor):len((*c.CallOptions).UpdateModelMonitor)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.modelMonitoringClient.UpdateModelMonitor(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &UpdateModelMonitorOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *modelMonitoringGRPCClient) GetModelMonitor(ctx context.Context, req *aiplatformpb.GetModelMonitorRequest, opts ...gax.CallOption) (*aiplatformpb.ModelMonitor, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetModelMonitor[0:len((*c.CallOptions).GetModelMonitor):len((*c.CallOptions).GetModelMonitor)], opts...)
	var resp *aiplatformpb.ModelMonitor
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.modelMonitoringClient.GetModelMonitor(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *modelMonitoringGRPCClient) ListModelMonitors(ctx context.Context, req *aiplatformpb.ListModelMonitorsRequest, opts ...gax.CallOption) *ModelMonitorIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListModelMonitors[0:len((*c.CallOptions).ListModelMonitors):len((*c.CallOptions).ListModelMonitors)], opts...)
	it := &ModelMonitorIterator{}
	req = proto.Clone(req).(*aiplatformpb.ListModelMonitorsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*aiplatformpb.ModelMonitor, string, error) {
		resp := &aiplatformpb.ListModelMonitorsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.modelMonitoringClient.ListModelMonitors(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetModelMonitors(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *modelMonitoringGRPCClient) DeleteModelMonitor(ctx context.Context, req *aiplatformpb.DeleteModelMonitorRequest, opts ...gax.CallOption) (*DeleteModelMonitorOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteModelMonitor[0:len((*c.CallOptions).DeleteModelMonitor):len((*c.CallOptions).DeleteModelMonitor)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.modelMonitoringClient.DeleteModelMonitor(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &DeleteModelMonitorOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *modelMonitoringGRPCClient) CreateModelMonitoringJob(ctx context.Context, req *aiplatformpb.CreateModelMonitoringJobRequest, opts ...gax.CallOption) (*aiplatformpb.ModelMonitoringJob, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateModelMonitoringJob[0:len((*c.CallOptions).CreateModelMonitoringJob):len((*c.CallOptions).CreateModelMonitoringJob)], opts...)
	var resp *aiplatformpb.ModelMonitoringJob
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.modelMonitoringClient.CreateModelMonitoringJob(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *modelMonitoringGRPCClient) GetModelMonitoringJob(ctx context.Context, req *aiplatformpb.GetModelMonitoringJobRequest, opts ...gax.CallOption) (*aiplatformpb.ModelMonitoringJob, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetModelMonitoringJob[0:len((*c.CallOptions).GetModelMonitoringJob):len((*c.CallOptions).GetModelMonitoringJob)], opts...)
	var resp *aiplatformpb.ModelMonitoringJob
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.modelMonitoringClient.GetModelMonitoringJob(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *modelMonitoringGRPCClient) ListModelMonitoringJobs(ctx context.Context, req *aiplatformpb.ListModelMonitoringJobsRequest, opts ...gax.CallOption) *ModelMonitoringJobIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListModelMonitoringJobs[0:len((*c.CallOptions).ListModelMonitoringJobs):len((*c.CallOptions).ListModelMonitoringJobs)], opts...)
	it := &ModelMonitoringJobIterator{}
	req = proto.Clone(req).(*aiplatformpb.ListModelMonitoringJobsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*aiplatformpb.ModelMonitoringJob, string, error) {
		resp := &aiplatformpb.ListModelMonitoringJobsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.modelMonitoringClient.ListModelMonitoringJobs(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetModelMonitoringJobs(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *modelMonitoringGRPCClient) DeleteModelMonitoringJob(ctx context.Context, req *aiplatformpb.DeleteModelMonitoringJobRequest, opts ...gax.CallOption) (*DeleteModelMonitoringJobOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteModelMonitoringJob[0:len((*c.CallOptions).DeleteModelMonitoringJob):len((*c.CallOptions).DeleteModelMonitoringJob)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.modelMonitoringClient.DeleteModelMonitoringJob(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &DeleteModelMonitoringJobOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *modelMonitoringGRPCClient) SearchModelMonitoringStats(ctx context.Context, req *aiplatformpb.SearchModelMonitoringStatsRequest, opts ...gax.CallOption) *ModelMonitoringStatsIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "model_monitor", url.QueryEscape(req.GetModelMonitor()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).SearchModelMonitoringStats[0:len((*c.CallOptions).SearchModelMonitoringStats):len((*c.CallOptions).SearchModelMonitoringStats)], opts...)
	it := &ModelMonitoringStatsIterator{}
	req = proto.Clone(req).(*aiplatformpb.SearchModelMonitoringStatsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*aiplatformpb.ModelMonitoringStats, string, error) {
		resp := &aiplatformpb.SearchModelMonitoringStatsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.modelMonitoringClient.SearchModelMonitoringStats(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetMonitoringStats(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *modelMonitoringGRPCClient) SearchModelMonitoringAlerts(ctx context.Context, req *aiplatformpb.SearchModelMonitoringAlertsRequest, opts ...gax.CallOption) *ModelMonitoringAlertIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "model_monitor", url.QueryEscape(req.GetModelMonitor()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).SearchModelMonitoringAlerts[0:len((*c.CallOptions).SearchModelMonitoringAlerts):len((*c.CallOptions).SearchModelMonitoringAlerts)], opts...)
	it := &ModelMonitoringAlertIterator{}
	req = proto.Clone(req).(*aiplatformpb.SearchModelMonitoringAlertsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*aiplatformpb.ModelMonitoringAlert, string, error) {
		resp := &aiplatformpb.SearchModelMonitoringAlertsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.modelMonitoringClient.SearchModelMonitoringAlerts(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetModelMonitoringAlerts(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *modelMonitoringGRPCClient) GetLocation(ctx context.Context, req *locationpb.GetLocationRequest, opts ...gax.CallOption) (*locationpb.Location, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetLocation[0:len((*c.CallOptions).GetLocation):len((*c.CallOptions).GetLocation)], opts...)
	var resp *locationpb.Location
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.locationsClient.GetLocation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *modelMonitoringGRPCClient) ListLocations(ctx context.Context, req *locationpb.ListLocationsRequest, opts ...gax.CallOption) *LocationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListLocations[0:len((*c.CallOptions).ListLocations):len((*c.CallOptions).ListLocations)], opts...)
	it := &LocationIterator{}
	req = proto.Clone(req).(*locationpb.ListLocationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*locationpb.Location, string, error) {
		resp := &locationpb.ListLocationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.locationsClient.ListLocations(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetLocations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *modelMonitoringGRPCClient) GetIamPolicy(ctx context.Context, req *iampb.GetIamPolicyRequest, opts ...gax.CallOption) (*iampb.Policy, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "resource", url.QueryEscape(req.GetResource()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetIamPolicy[0:len((*c.CallOptions).GetIamPolicy):len((*c.CallOptions).GetIamPolicy)], opts...)
	var resp *iampb.Policy
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.iamPolicyClient.GetIamPolicy(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *modelMonitoringGRPCClient) SetIamPolicy(ctx context.Context, req *iampb.SetIamPolicyRequest, opts ...gax.CallOption) (*iampb.Policy, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "resource", url.QueryEscape(req.GetResource()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).SetIamPolicy[0:len((*c.CallOptions).SetIamPolicy):len((*c.CallOptions).SetIamPolicy)], opts...)
	var resp *iampb.Policy
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.iamPolicyClient.SetIamPolicy(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *modelMonitoringGRPCClient) TestIamPermissions(ctx context.Context, req *iampb.TestIamPermissionsRequest, opts ...gax.CallOption) (*iampb.TestIamPermissionsResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "resource", url.QueryEscape(req.GetResource()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).TestIamPermissions[0:len((*c.CallOptions).TestIamPermissions):len((*c.CallOptions).TestIamPermissions)], opts...)
	var resp *iampb.TestIamPermissionsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.iamPolicyClient.TestIamPermissions(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *modelMonitoringGRPCClient) CancelOperation(ctx context.Context, req *longrunningpb.CancelOperationRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CancelOperation[0:len((*c.CallOptions).CancelOperation):len((*c.CallOptions).CancelOperation)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.operationsClient.CancelOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *modelMonitoringGRPCClient) DeleteOperation(ctx context.Context, req *longrunningpb.DeleteOperationRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteOperation[0:len((*c.CallOptions).DeleteOperation):len((*c.CallOptions).DeleteOperation)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.operationsClient.DeleteOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *modelMonitoringGRPCClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.operationsClient.GetOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *modelMonitoringGRPCClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOperations[0:len((*c.CallOptions).ListOperations):len((*c.CallOptions).ListOperations)], opts...)
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.operationsClient.ListOperations(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *modelMonitoringGRPCClient) WaitOperation(ctx context.Context, req *longrunningpb.WaitOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).WaitOperation[0:len((*c.CallOptions).WaitOperation):len((*c.CallOptions).WaitOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.operationsClient.WaitOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// CreateModelMonitorOperation returns a new CreateModelMonitorOperation from a given name.
// The name must be that of a previously created CreateModelMonitorOperation, possibly from a different process.
func (c *modelMonitoringGRPCClient) CreateModelMonitorOperation(name string) *CreateModelMonitorOperation {
	return &CreateModelMonitorOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// DeleteModelMonitorOperation returns a new DeleteModelMonitorOperation from a given name.
// The name must be that of a previously created DeleteModelMonitorOperation, possibly from a different process.
func (c *modelMonitoringGRPCClient) DeleteModelMonitorOperation(name string) *DeleteModelMonitorOperation {
	return &DeleteModelMonitorOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// DeleteModelMonitoringJobOperation returns a new DeleteModelMonitoringJobOperation from a given name.
// The name must be that of a previously created DeleteModelMonitoringJobOperation, possibly from a different process.
func (c *modelMonitoringGRPCClient) DeleteModelMonitoringJobOperation(name string) *DeleteModelMonitoringJobOperation {
	return &DeleteModelMonitoringJobOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// UpdateModelMonitorOperation returns a new UpdateModelMonitorOperation from a given name.
// The name must be that of a previously created UpdateModelMonitorOperation, possibly from a different process.
func (c *modelMonitoringGRPCClient) UpdateModelMonitorOperation(name string) *UpdateModelMonitorOperation {
	return &UpdateModelMonitorOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}
