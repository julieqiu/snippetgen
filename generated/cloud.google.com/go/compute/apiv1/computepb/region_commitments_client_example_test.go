// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.


package computepb_test

import (
	"context"

	computepb "cloud.google.com/go/compute/apiv1/computepb"
	"google.golang.org/api/iterator"
)

func ExampleNewRegionCommitmentsClient() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionCommitmentsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Use client.
	_ = c
}

func ExampleRegionCommitmentsClient_AggregatedList() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionCommitmentsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#AggregatedListRegionCommitmentsRequest.
	req := &computepb.AggregatedListRegionCommitmentsRequest{
		Filter: "",
		IncludeAllScopes: "",
		MaxResults: "",
		OrderBy: "",
		PageToken: "",
		Project: "",
		ReturnPartialSuccess: "",
		ServiceProjectNumber: "",
	}
	it := c.AggregatedList(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp

		// If you need to access the underlying RPC response,
		// you can do so by casting the `Response` as below.
		// Otherwise, remove this line. Only populated after
		// first call to Next(). Not safe for concurrent access.
		_ = it.Response.(*computepb.CommitmentAggregatedList)
	}
}

func ExampleRegionCommitmentsClient_Get() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionCommitmentsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#GetRegionCommitmentRequest.
	req := &computepb.GetRegionCommitmentRequest{
		Commitment: "",
		Project: "",
		Region: "",
	}
	resp, err := c.Get(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRegionCommitmentsClient_Insert() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionCommitmentsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#InsertRegionCommitmentRequest.
	req := &computepb.InsertRegionCommitmentRequest{
		CommitmentResource: &computepb.Commitment{
			AutoRenew: "",
			Category: "",
			CreationTimestamp: "",
			Description: "",
			EndTimestamp: "",
			ExistingReservations: "",
			Id: "",
			Kind: "",
			LicenseResource: &computepb.LicenseResourceCommitment{
				Amount: "",
				CoresPerLicense: "",
				License: "",
			}
			MergeSourceCommitments: "",
			Name: "",
			Plan: "",
			Region: "",
			Reservations: &computepb.Reservation{
				AggregateReservation: &computepb.AllocationAggregateReservation{...}
				Commitment: "",
				CreationTimestamp: "",
				Description: "",
				Id: "",
				Kind: "",
				Name: "",
				ResourcePolicies: "",
				ResourceStatus: &computepb.AllocationResourceStatus{...}
				SatisfiesPzs: "",
				SelfLink: "",
				ShareSettings: &computepb.ShareSettings{...}
				SpecificReservation: &computepb.AllocationSpecificSKUReservation{...}
				SpecificReservationRequired: "",
				Status: "",
				Zone: "",
			}
			Resources: &computepb.ResourceCommitment{
				AcceleratorType: "",
				Amount: "",
				Type: "",
			}
			SelfLink: "",
			SplitSourceCommitment: "",
			StartTimestamp: "",
			Status: "",
			StatusMessage: "",
			Type: "",
		}
		Project: "",
		Region: "",
		RequestId: "",
	}
	resp, err := c.Insert(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRegionCommitmentsClient_List() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionCommitmentsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#ListRegionCommitmentsRequest.
	req := &computepb.ListRegionCommitmentsRequest{
		Filter: "",
		MaxResults: "",
		OrderBy: "",
		PageToken: "",
		Project: "",
		Region: "",
		ReturnPartialSuccess: "",
	}
	it := c.List(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp

		// If you need to access the underlying RPC response,
		// you can do so by casting the `Response` as below.
		// Otherwise, remove this line. Only populated after
		// first call to Next(). Not safe for concurrent access.
		_ = it.Response.(*computepb.CommitmentList)
	}
}

func ExampleRegionCommitmentsClient_Update() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionCommitmentsClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#UpdateRegionCommitmentRequest.
	req := &computepb.UpdateRegionCommitmentRequest{
		Commitment: "",
		CommitmentResource: &computepb.Commitment{
			AutoRenew: "",
			Category: "",
			CreationTimestamp: "",
			Description: "",
			EndTimestamp: "",
			ExistingReservations: "",
			Id: "",
			Kind: "",
			LicenseResource: &computepb.LicenseResourceCommitment{
				Amount: "",
				CoresPerLicense: "",
				License: "",
			}
			MergeSourceCommitments: "",
			Name: "",
			Plan: "",
			Region: "",
			Reservations: &computepb.Reservation{
				AggregateReservation: &computepb.AllocationAggregateReservation{...}
				Commitment: "",
				CreationTimestamp: "",
				Description: "",
				Id: "",
				Kind: "",
				Name: "",
				ResourcePolicies: "",
				ResourceStatus: &computepb.AllocationResourceStatus{...}
				SatisfiesPzs: "",
				SelfLink: "",
				ShareSettings: &computepb.ShareSettings{...}
				SpecificReservation: &computepb.AllocationSpecificSKUReservation{...}
				SpecificReservationRequired: "",
				Status: "",
				Zone: "",
			}
			Resources: &computepb.ResourceCommitment{
				AcceleratorType: "",
				Amount: "",
				Type: "",
			}
			SelfLink: "",
			SplitSourceCommitment: "",
			StartTimestamp: "",
			Status: "",
			StatusMessage: "",
			Type: "",
		}
		Paths: "",
		Project: "",
		Region: "",
		RequestId: "",
		UpdateMask: "",
	}
	resp, err := c.Update(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}
