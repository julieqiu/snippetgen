// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

// [START aiplatform_v1beta1_generated_EvaluationService_EvaluateInstances_sync]

package main

import (
	"context"

	aiplatformpb "cloud.google.com/go/aiplatform/apiv1beta1/aiplatformpb"
)

func main() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := aiplatformpb.NewEvaluationClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/aiplatform/apiv1beta1/aiplatformpb#EvaluateInstancesRequest.
	req := &aiplatformpb.EvaluateInstancesRequest{
		ExactMatchInput: &aiplatformpb.ExactMatchInput{
			MetricSpec: &aiplatformpb.ExactMatchSpec{
			}
			Instances: &aiplatformpb.ExactMatchInstance{
				Prediction: "",
				Reference: "",
			}
		}
		BleuInput: &aiplatformpb.BleuInput{
			MetricSpec: &aiplatformpb.BleuSpec{
			}
			Instances: &aiplatformpb.BleuInstance{
				Prediction: "",
				Reference: "",
			}
		}
		RougeInput: &aiplatformpb.RougeInput{
			MetricSpec: &aiplatformpb.RougeSpec{
				RougeType: "",
				UseStemmer: "",
				SplitSummaries: "",
			}
			Instances: &aiplatformpb.RougeInstance{
				Prediction: "",
				Reference: "",
			}
		}
		FluencyInput: &aiplatformpb.FluencyInput{
			MetricSpec: &aiplatformpb.FluencySpec{
				Version: "",
			}
			Instance: &aiplatformpb.FluencyInstance{
				Prediction: "",
			}
		}
		CoherenceInput: &aiplatformpb.CoherenceInput{
			MetricSpec: &aiplatformpb.CoherenceSpec{
				Version: "",
			}
			Instance: &aiplatformpb.CoherenceInstance{
				Prediction: "",
			}
		}
		SafetyInput: &aiplatformpb.SafetyInput{
			MetricSpec: &aiplatformpb.SafetySpec{
				Version: "",
			}
			Instance: &aiplatformpb.SafetyInstance{
				Prediction: "",
			}
		}
		GroundednessInput: &aiplatformpb.GroundednessInput{
			MetricSpec: &aiplatformpb.GroundednessSpec{
				Version: "",
			}
			Instance: &aiplatformpb.GroundednessInstance{
				Prediction: "",
				Context: "",
			}
		}
		FulfillmentInput: &aiplatformpb.FulfillmentInput{
			MetricSpec: &aiplatformpb.FulfillmentSpec{
				Version: "",
			}
			Instance: &aiplatformpb.FulfillmentInstance{
				Prediction: "",
				Instruction: "",
			}
		}
		SummarizationQualityInput: &aiplatformpb.SummarizationQualityInput{
			MetricSpec: &aiplatformpb.SummarizationQualitySpec{
				UseReference: "",
				Version: "",
			}
			Instance: &aiplatformpb.SummarizationQualityInstance{
				Prediction: "",
				Reference: "",
				Context: "",
				Instruction: "",
			}
		}
		PairwiseSummarizationQualityInput: &aiplatformpb.PairwiseSummarizationQualityInput{
			MetricSpec: &aiplatformpb.PairwiseSummarizationQualitySpec{
				UseReference: "",
				Version: "",
			}
			Instance: &aiplatformpb.PairwiseSummarizationQualityInstance{
				Prediction: "",
				BaselinePrediction: "",
				Reference: "",
				Context: "",
				Instruction: "",
			}
		}
		SummarizationHelpfulnessInput: &aiplatformpb.SummarizationHelpfulnessInput{
			MetricSpec: &aiplatformpb.SummarizationHelpfulnessSpec{
				UseReference: "",
				Version: "",
			}
			Instance: &aiplatformpb.SummarizationHelpfulnessInstance{
				Prediction: "",
				Reference: "",
				Context: "",
				Instruction: "",
			}
		}
		SummarizationVerbosityInput: &aiplatformpb.SummarizationVerbosityInput{
			MetricSpec: &aiplatformpb.SummarizationVerbositySpec{
				UseReference: "",
				Version: "",
			}
			Instance: &aiplatformpb.SummarizationVerbosityInstance{
				Prediction: "",
				Reference: "",
				Context: "",
				Instruction: "",
			}
		}
		QuestionAnsweringQualityInput: &aiplatformpb.QuestionAnsweringQualityInput{
			MetricSpec: &aiplatformpb.QuestionAnsweringQualitySpec{
				UseReference: "",
				Version: "",
			}
			Instance: &aiplatformpb.QuestionAnsweringQualityInstance{
				Prediction: "",
				Reference: "",
				Context: "",
				Instruction: "",
			}
		}
		PairwiseQuestionAnsweringQualityInput: &aiplatformpb.PairwiseQuestionAnsweringQualityInput{
			MetricSpec: &aiplatformpb.PairwiseQuestionAnsweringQualitySpec{
				UseReference: "",
				Version: "",
			}
			Instance: &aiplatformpb.PairwiseQuestionAnsweringQualityInstance{
				Prediction: "",
				BaselinePrediction: "",
				Reference: "",
				Context: "",
				Instruction: "",
			}
		}
		QuestionAnsweringRelevanceInput: &aiplatformpb.QuestionAnsweringRelevanceInput{
			MetricSpec: &aiplatformpb.QuestionAnsweringRelevanceSpec{
				UseReference: "",
				Version: "",
			}
			Instance: &aiplatformpb.QuestionAnsweringRelevanceInstance{
				Prediction: "",
				Reference: "",
				Context: "",
				Instruction: "",
			}
		}
		QuestionAnsweringHelpfulnessInput: &aiplatformpb.QuestionAnsweringHelpfulnessInput{
			MetricSpec: &aiplatformpb.QuestionAnsweringHelpfulnessSpec{
				UseReference: "",
				Version: "",
			}
			Instance: &aiplatformpb.QuestionAnsweringHelpfulnessInstance{
				Prediction: "",
				Reference: "",
				Context: "",
				Instruction: "",
			}
		}
		QuestionAnsweringCorrectnessInput: &aiplatformpb.QuestionAnsweringCorrectnessInput{
			MetricSpec: &aiplatformpb.QuestionAnsweringCorrectnessSpec{
				UseReference: "",
				Version: "",
			}
			Instance: &aiplatformpb.QuestionAnsweringCorrectnessInstance{
				Prediction: "",
				Reference: "",
				Context: "",
				Instruction: "",
			}
		}
		ToolCallValidInput: &aiplatformpb.ToolCallValidInput{
			MetricSpec: &aiplatformpb.ToolCallValidSpec{
			}
			Instances: &aiplatformpb.ToolCallValidInstance{
				Prediction: "",
				Reference: "",
			}
		}
		ToolNameMatchInput: &aiplatformpb.ToolNameMatchInput{
			MetricSpec: &aiplatformpb.ToolNameMatchSpec{
			}
			Instances: &aiplatformpb.ToolNameMatchInstance{
				Prediction: "",
				Reference: "",
			}
		}
		ToolParameterKeyMatchInput: &aiplatformpb.ToolParameterKeyMatchInput{
			MetricSpec: &aiplatformpb.ToolParameterKeyMatchSpec{
			}
			Instances: &aiplatformpb.ToolParameterKeyMatchInstance{
				Prediction: "",
				Reference: "",
			}
		}
		ToolParameterKvMatchInput: &aiplatformpb.ToolParameterKVMatchInput{
			MetricSpec: &aiplatformpb.ToolParameterKVMatchSpec{
				UseStrictStringMatch: "",
			}
			Instances: &aiplatformpb.ToolParameterKVMatchInstance{
				Prediction: "",
				Reference: "",
			}
		}
		Location: "",
	}
	resp, err := c.EvaluateInstances(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

// [END aiplatform_v1beta1_generated_EvaluationService_EvaluateInstances_sync]
