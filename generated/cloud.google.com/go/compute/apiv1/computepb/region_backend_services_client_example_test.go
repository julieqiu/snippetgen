// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.


package computepb_test

import (
	"context"

	computepb "cloud.google.com/go/compute/apiv1/computepb"
	"google.golang.org/api/iterator"
)

func ExampleNewRegionBackendServicesClient() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Use client.
	_ = c
}

func ExampleRegionBackendServicesClient_Delete() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#DeleteRegionBackendServiceRequest.
	req := &computepb.DeleteRegionBackendServiceRequest{
		BackendService: "",
		Project: "",
		Region: "",
		RequestId: "",
	}
	resp, err := c.Delete(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRegionBackendServicesClient_Get() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#GetRegionBackendServiceRequest.
	req := &computepb.GetRegionBackendServiceRequest{
		BackendService: "",
		Project: "",
		Region: "",
	}
	resp, err := c.Get(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRegionBackendServicesClient_GetHealth() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#GetHealthRegionBackendServiceRequest.
	req := &computepb.GetHealthRegionBackendServiceRequest{
		BackendService: "",
		Project: "",
		Region: "",
		ResourceGroupReferenceResource: &computepb.ResourceGroupReference{
			Group: "",
		}
	}
	resp, err := c.GetHealth(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRegionBackendServicesClient_GetIamPolicy() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#GetIamPolicyRegionBackendServiceRequest.
	req := &computepb.GetIamPolicyRegionBackendServiceRequest{
		OptionsRequestedPolicyVersion: "",
		Project: "",
		Region: "",
		Resource: "",
	}
	resp, err := c.GetIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRegionBackendServicesClient_Insert() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#InsertRegionBackendServiceRequest.
	req := &computepb.InsertRegionBackendServiceRequest{
		BackendServiceResource: &computepb.BackendService{
			AffinityCookieTtlSec: "",
			Backends: &computepb.Backend{
				BalancingMode: "",
				CapacityScaler: "",
				Description: "",
				Failover: "",
				Group: "",
				MaxConnections: "",
				MaxConnectionsPerEndpoint: "",
				MaxConnectionsPerInstance: "",
				MaxRate: "",
				MaxRatePerEndpoint: "",
				MaxRatePerInstance: "",
				MaxUtilization: "",
				Preference: "",
			}
			CdnPolicy: &computepb.BackendServiceCdnPolicy{
				BypassCacheOnRequestHeaders: &computepb.BackendServiceCdnPolicyBypassCacheOnRequestHeader{...}
				CacheKeyPolicy: &computepb.CacheKeyPolicy{...}
				CacheMode: "",
				ClientTtl: "",
				DefaultTtl: "",
				MaxTtl: "",
				NegativeCaching: "",
				NegativeCachingPolicy: &computepb.BackendServiceCdnPolicyNegativeCachingPolicy{...}
				RequestCoalescing: "",
				ServeWhileStale: "",
				SignedUrlCacheMaxAgeSec: "",
				SignedUrlKeyNames: "",
			}
			CircuitBreakers: &computepb.CircuitBreakers{
				MaxConnections: "",
				MaxPendingRequests: "",
				MaxRequests: "",
				MaxRequestsPerConnection: "",
				MaxRetries: "",
			}
			CompressionMode: "",
			ConnectionDraining: &computepb.ConnectionDraining{
				DrainingTimeoutSec: "",
			}
			ConnectionTrackingPolicy: &computepb.BackendServiceConnectionTrackingPolicy{
				ConnectionPersistenceOnUnhealthyBackends: "",
				EnableStrongAffinity: "",
				IdleTimeoutSec: "",
				TrackingMode: "",
			}
			ConsistentHash: &computepb.ConsistentHashLoadBalancerSettings{
				HttpCookie: &computepb.ConsistentHashLoadBalancerSettingsHttpCookie{...}
				HttpHeaderName: "",
				MinimumRingSize: "",
			}
			CreationTimestamp: "",
			CustomRequestHeaders: "",
			CustomResponseHeaders: "",
			Description: "",
			EdgeSecurityPolicy: "",
			EnableCDN: "",
			FailoverPolicy: &computepb.BackendServiceFailoverPolicy{
				DisableConnectionDrainOnFailover: "",
				DropTrafficIfUnhealthy: "",
				FailoverRatio: "",
			}
			Fingerprint: "",
			HealthChecks: "",
			Iap: &computepb.BackendServiceIAP{
				Enabled: "",
				Oauth2ClientId: "",
				Oauth2ClientSecret: "",
				Oauth2ClientSecretSha256: "",
			}
			Id: "",
			Kind: "",
			LoadBalancingScheme: "",
			LocalityLbPolicies: &computepb.BackendServiceLocalityLoadBalancingPolicyConfig{
				CustomPolicy: &computepb.BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy{...}
				Policy: &computepb.BackendServiceLocalityLoadBalancingPolicyConfigPolicy{...}
			}
			LocalityLbPolicy: "",
			LogConfig: &computepb.BackendServiceLogConfig{
				Enable: "",
				OptionalFields: "",
				OptionalMode: "",
				SampleRate: "",
			}
			MaxStreamDuration: &computepb.Duration{
				Nanos: "",
				Seconds: "",
			}
			Metadatas: "",
			Name: "",
			Network: "",
			OutlierDetection: &computepb.OutlierDetection{
				BaseEjectionTime: &computepb.Duration{...}
				ConsecutiveErrors: "",
				ConsecutiveGatewayFailure: "",
				EnforcingConsecutiveErrors: "",
				EnforcingConsecutiveGatewayFailure: "",
				EnforcingSuccessRate: "",
				Interval: &computepb.Duration{...}
				MaxEjectionPercent: "",
				SuccessRateMinimumHosts: "",
				SuccessRateRequestVolume: "",
				SuccessRateStdevFactor: "",
			}
			Port: "",
			PortName: "",
			Protocol: "",
			Region: "",
			SecurityPolicy: "",
			SecuritySettings: &computepb.SecuritySettings{
				AwsV4Authentication: &computepb.AWSV4Signature{...}
				ClientTlsPolicy: "",
				SubjectAltNames: "",
			}
			SelfLink: "",
			ServiceBindings: "",
			ServiceLbPolicy: "",
			SessionAffinity: "",
			Subsetting: &computepb.Subsetting{
				Policy: "",
			}
			TimeoutSec: "",
			UsedBy: &computepb.BackendServiceUsedBy{
				Reference: "",
			}
		}
		Project: "",
		Region: "",
		RequestId: "",
	}
	resp, err := c.Insert(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRegionBackendServicesClient_List() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#ListRegionBackendServicesRequest.
	req := &computepb.ListRegionBackendServicesRequest{
		Filter: "",
		MaxResults: "",
		OrderBy: "",
		PageToken: "",
		Project: "",
		Region: "",
		ReturnPartialSuccess: "",
	}
	it := c.List(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp

		// If you need to access the underlying RPC response,
		// you can do so by casting the `Response` as below.
		// Otherwise, remove this line. Only populated after
		// first call to Next(). Not safe for concurrent access.
		_ = it.Response.(*computepb.BackendServiceList)
	}
}

func ExampleRegionBackendServicesClient_ListUsable() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#ListUsableRegionBackendServicesRequest.
	req := &computepb.ListUsableRegionBackendServicesRequest{
		Filter: "",
		MaxResults: "",
		OrderBy: "",
		PageToken: "",
		Project: "",
		Region: "",
		ReturnPartialSuccess: "",
	}
	it := c.ListUsable(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			// TODO: Handle error.
		}
		// TODO: Use resp.
		_ = resp

		// If you need to access the underlying RPC response,
		// you can do so by casting the `Response` as below.
		// Otherwise, remove this line. Only populated after
		// first call to Next(). Not safe for concurrent access.
		_ = it.Response.(*computepb.BackendServiceListUsable)
	}
}

func ExampleRegionBackendServicesClient_Patch() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#PatchRegionBackendServiceRequest.
	req := &computepb.PatchRegionBackendServiceRequest{
		BackendService: "",
		BackendServiceResource: &computepb.BackendService{
			AffinityCookieTtlSec: "",
			Backends: &computepb.Backend{
				BalancingMode: "",
				CapacityScaler: "",
				Description: "",
				Failover: "",
				Group: "",
				MaxConnections: "",
				MaxConnectionsPerEndpoint: "",
				MaxConnectionsPerInstance: "",
				MaxRate: "",
				MaxRatePerEndpoint: "",
				MaxRatePerInstance: "",
				MaxUtilization: "",
				Preference: "",
			}
			CdnPolicy: &computepb.BackendServiceCdnPolicy{
				BypassCacheOnRequestHeaders: &computepb.BackendServiceCdnPolicyBypassCacheOnRequestHeader{...}
				CacheKeyPolicy: &computepb.CacheKeyPolicy{...}
				CacheMode: "",
				ClientTtl: "",
				DefaultTtl: "",
				MaxTtl: "",
				NegativeCaching: "",
				NegativeCachingPolicy: &computepb.BackendServiceCdnPolicyNegativeCachingPolicy{...}
				RequestCoalescing: "",
				ServeWhileStale: "",
				SignedUrlCacheMaxAgeSec: "",
				SignedUrlKeyNames: "",
			}
			CircuitBreakers: &computepb.CircuitBreakers{
				MaxConnections: "",
				MaxPendingRequests: "",
				MaxRequests: "",
				MaxRequestsPerConnection: "",
				MaxRetries: "",
			}
			CompressionMode: "",
			ConnectionDraining: &computepb.ConnectionDraining{
				DrainingTimeoutSec: "",
			}
			ConnectionTrackingPolicy: &computepb.BackendServiceConnectionTrackingPolicy{
				ConnectionPersistenceOnUnhealthyBackends: "",
				EnableStrongAffinity: "",
				IdleTimeoutSec: "",
				TrackingMode: "",
			}
			ConsistentHash: &computepb.ConsistentHashLoadBalancerSettings{
				HttpCookie: &computepb.ConsistentHashLoadBalancerSettingsHttpCookie{...}
				HttpHeaderName: "",
				MinimumRingSize: "",
			}
			CreationTimestamp: "",
			CustomRequestHeaders: "",
			CustomResponseHeaders: "",
			Description: "",
			EdgeSecurityPolicy: "",
			EnableCDN: "",
			FailoverPolicy: &computepb.BackendServiceFailoverPolicy{
				DisableConnectionDrainOnFailover: "",
				DropTrafficIfUnhealthy: "",
				FailoverRatio: "",
			}
			Fingerprint: "",
			HealthChecks: "",
			Iap: &computepb.BackendServiceIAP{
				Enabled: "",
				Oauth2ClientId: "",
				Oauth2ClientSecret: "",
				Oauth2ClientSecretSha256: "",
			}
			Id: "",
			Kind: "",
			LoadBalancingScheme: "",
			LocalityLbPolicies: &computepb.BackendServiceLocalityLoadBalancingPolicyConfig{
				CustomPolicy: &computepb.BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy{...}
				Policy: &computepb.BackendServiceLocalityLoadBalancingPolicyConfigPolicy{...}
			}
			LocalityLbPolicy: "",
			LogConfig: &computepb.BackendServiceLogConfig{
				Enable: "",
				OptionalFields: "",
				OptionalMode: "",
				SampleRate: "",
			}
			MaxStreamDuration: &computepb.Duration{
				Nanos: "",
				Seconds: "",
			}
			Metadatas: "",
			Name: "",
			Network: "",
			OutlierDetection: &computepb.OutlierDetection{
				BaseEjectionTime: &computepb.Duration{...}
				ConsecutiveErrors: "",
				ConsecutiveGatewayFailure: "",
				EnforcingConsecutiveErrors: "",
				EnforcingConsecutiveGatewayFailure: "",
				EnforcingSuccessRate: "",
				Interval: &computepb.Duration{...}
				MaxEjectionPercent: "",
				SuccessRateMinimumHosts: "",
				SuccessRateRequestVolume: "",
				SuccessRateStdevFactor: "",
			}
			Port: "",
			PortName: "",
			Protocol: "",
			Region: "",
			SecurityPolicy: "",
			SecuritySettings: &computepb.SecuritySettings{
				AwsV4Authentication: &computepb.AWSV4Signature{...}
				ClientTlsPolicy: "",
				SubjectAltNames: "",
			}
			SelfLink: "",
			ServiceBindings: "",
			ServiceLbPolicy: "",
			SessionAffinity: "",
			Subsetting: &computepb.Subsetting{
				Policy: "",
			}
			TimeoutSec: "",
			UsedBy: &computepb.BackendServiceUsedBy{
				Reference: "",
			}
		}
		Project: "",
		Region: "",
		RequestId: "",
	}
	resp, err := c.Patch(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRegionBackendServicesClient_SetIamPolicy() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#SetIamPolicyRegionBackendServiceRequest.
	req := &computepb.SetIamPolicyRegionBackendServiceRequest{
		Project: "",
		Region: "",
		RegionSetPolicyRequestResource: &computepb.RegionSetPolicyRequest{
			Bindings: &computepb.Binding{
				BindingId: "",
				Condition: &computepb.Expr{...}
				Members: "",
				Role: "",
			}
			Etag: "",
			Policy: &computepb.Policy{
				AuditConfigs: &computepb.AuditConfig{...}
				Bindings: &computepb.Binding{...}
				Etag: "",
				IamOwned: "",
				Rules: &computepb.Rule{...}
				Version: "",
			}
		}
		Resource: "",
	}
	resp, err := c.SetIamPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRegionBackendServicesClient_SetSecurityPolicy() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#SetSecurityPolicyRegionBackendServiceRequest.
	req := &computepb.SetSecurityPolicyRegionBackendServiceRequest{
		BackendService: "",
		Project: "",
		Region: "",
		RequestId: "",
		SecurityPolicyReferenceResource: &computepb.SecurityPolicyReference{
			SecurityPolicy: "",
		}
	}
	resp, err := c.SetSecurityPolicy(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRegionBackendServicesClient_TestIamPermissions() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#TestIamPermissionsRegionBackendServiceRequest.
	req := &computepb.TestIamPermissionsRegionBackendServiceRequest{
		Project: "",
		Region: "",
		Resource: "",
		TestPermissionsRequestResource: &computepb.TestPermissionsRequest{
			Permissions: "",
		}
	}
	resp, err := c.TestIamPermissions(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

func ExampleRegionBackendServicesClient_Update() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewRegionBackendServicesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#UpdateRegionBackendServiceRequest.
	req := &computepb.UpdateRegionBackendServiceRequest{
		BackendService: "",
		BackendServiceResource: &computepb.BackendService{
			AffinityCookieTtlSec: "",
			Backends: &computepb.Backend{
				BalancingMode: "",
				CapacityScaler: "",
				Description: "",
				Failover: "",
				Group: "",
				MaxConnections: "",
				MaxConnectionsPerEndpoint: "",
				MaxConnectionsPerInstance: "",
				MaxRate: "",
				MaxRatePerEndpoint: "",
				MaxRatePerInstance: "",
				MaxUtilization: "",
				Preference: "",
			}
			CdnPolicy: &computepb.BackendServiceCdnPolicy{
				BypassCacheOnRequestHeaders: &computepb.BackendServiceCdnPolicyBypassCacheOnRequestHeader{...}
				CacheKeyPolicy: &computepb.CacheKeyPolicy{...}
				CacheMode: "",
				ClientTtl: "",
				DefaultTtl: "",
				MaxTtl: "",
				NegativeCaching: "",
				NegativeCachingPolicy: &computepb.BackendServiceCdnPolicyNegativeCachingPolicy{...}
				RequestCoalescing: "",
				ServeWhileStale: "",
				SignedUrlCacheMaxAgeSec: "",
				SignedUrlKeyNames: "",
			}
			CircuitBreakers: &computepb.CircuitBreakers{
				MaxConnections: "",
				MaxPendingRequests: "",
				MaxRequests: "",
				MaxRequestsPerConnection: "",
				MaxRetries: "",
			}
			CompressionMode: "",
			ConnectionDraining: &computepb.ConnectionDraining{
				DrainingTimeoutSec: "",
			}
			ConnectionTrackingPolicy: &computepb.BackendServiceConnectionTrackingPolicy{
				ConnectionPersistenceOnUnhealthyBackends: "",
				EnableStrongAffinity: "",
				IdleTimeoutSec: "",
				TrackingMode: "",
			}
			ConsistentHash: &computepb.ConsistentHashLoadBalancerSettings{
				HttpCookie: &computepb.ConsistentHashLoadBalancerSettingsHttpCookie{...}
				HttpHeaderName: "",
				MinimumRingSize: "",
			}
			CreationTimestamp: "",
			CustomRequestHeaders: "",
			CustomResponseHeaders: "",
			Description: "",
			EdgeSecurityPolicy: "",
			EnableCDN: "",
			FailoverPolicy: &computepb.BackendServiceFailoverPolicy{
				DisableConnectionDrainOnFailover: "",
				DropTrafficIfUnhealthy: "",
				FailoverRatio: "",
			}
			Fingerprint: "",
			HealthChecks: "",
			Iap: &computepb.BackendServiceIAP{
				Enabled: "",
				Oauth2ClientId: "",
				Oauth2ClientSecret: "",
				Oauth2ClientSecretSha256: "",
			}
			Id: "",
			Kind: "",
			LoadBalancingScheme: "",
			LocalityLbPolicies: &computepb.BackendServiceLocalityLoadBalancingPolicyConfig{
				CustomPolicy: &computepb.BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy{...}
				Policy: &computepb.BackendServiceLocalityLoadBalancingPolicyConfigPolicy{...}
			}
			LocalityLbPolicy: "",
			LogConfig: &computepb.BackendServiceLogConfig{
				Enable: "",
				OptionalFields: "",
				OptionalMode: "",
				SampleRate: "",
			}
			MaxStreamDuration: &computepb.Duration{
				Nanos: "",
				Seconds: "",
			}
			Metadatas: "",
			Name: "",
			Network: "",
			OutlierDetection: &computepb.OutlierDetection{
				BaseEjectionTime: &computepb.Duration{...}
				ConsecutiveErrors: "",
				ConsecutiveGatewayFailure: "",
				EnforcingConsecutiveErrors: "",
				EnforcingConsecutiveGatewayFailure: "",
				EnforcingSuccessRate: "",
				Interval: &computepb.Duration{...}
				MaxEjectionPercent: "",
				SuccessRateMinimumHosts: "",
				SuccessRateRequestVolume: "",
				SuccessRateStdevFactor: "",
			}
			Port: "",
			PortName: "",
			Protocol: "",
			Region: "",
			SecurityPolicy: "",
			SecuritySettings: &computepb.SecuritySettings{
				AwsV4Authentication: &computepb.AWSV4Signature{...}
				ClientTlsPolicy: "",
				SubjectAltNames: "",
			}
			SelfLink: "",
			ServiceBindings: "",
			ServiceLbPolicy: "",
			SessionAffinity: "",
			Subsetting: &computepb.Subsetting{
				Policy: "",
			}
			TimeoutSec: "",
			UsedBy: &computepb.BackendServiceUsedBy{
				Reference: "",
			}
		}
		Project: "",
		Region: "",
		RequestId: "",
	}
	resp, err := c.Update(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}
