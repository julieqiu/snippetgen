// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

// [START compute_v1_generated_Instances_Update_sync]

package main

import (
	"context"

	computepb "cloud.google.com/go/compute/apiv1/computepb"
)

func main() {
	ctx := context.Background()
	// This snippet has been automatically generated and should be regarded as a code template only.
	// It will require modifications to work:
	// - It may require correct/in-range values for request initialization.
	// - It may require specifying regional endpoints when creating the service client as shown in:
	//   https://pkg.go.dev/cloud.google.com/go#hdr-Client_Options
	c, err := computepb.NewInstancesClient(ctx)
	if err != nil {
		// TODO: Handle error.
	}
	defer c.Close()

	// TODO: Fill request struct fields.
	// See https://pkg.go.dev/cloud.google.com/go/compute/apiv1/computepb#UpdateInstanceRequest.
	req := &computepb.UpdateInstanceRequest{
		Instance: "",
		InstanceResource: &computepb.Instance{
			AdvancedMachineFeatures: &computepb.AdvancedMachineFeatures{
				EnableNestedVirtualization: "",
				EnableUefiNetworking: "",
				ThreadsPerCore: "",
				VisibleCoreCount: "",
			}
			CanIpForward: "",
			ConfidentialInstanceConfig: &computepb.ConfidentialInstanceConfig{
				EnableConfidentialCompute: "",
			}
			CpuPlatform: "",
			CreationTimestamp: "",
			DeletionProtection: "",
			Description: "",
			Disks: &computepb.AttachedDisk{
				Architecture: "",
				AutoDelete: "",
				Boot: "",
				DeviceName: "",
				DiskEncryptionKey: &computepb.CustomerEncryptionKey{...}
				DiskSizeGb: "",
				ForceAttach: "",
				GuestOsFeatures: &computepb.GuestOsFeature{...}
				Index: "",
				InitializeParams: &computepb.AttachedDiskInitializeParams{...}
				Interface: "",
				Kind: "",
				Licenses: "",
				Mode: "",
				SavedState: "",
				ShieldedInstanceInitialState: &computepb.InitialStateConfig{...}
				Source: "",
				Type: "",
			}
			DisplayDevice: &computepb.DisplayDevice{
				EnableDisplay: "",
			}
			Fingerprint: "",
			GuestAccelerators: &computepb.AcceleratorConfig{
				AcceleratorCount: "",
				AcceleratorType: "",
			}
			Hostname: "",
			Id: "",
			InstanceEncryptionKey: &computepb.CustomerEncryptionKey{
				KmsKeyName: "",
				KmsKeyServiceAccount: "",
				RawKey: "",
				RsaEncryptedKey: "",
				Sha256: "",
			}
			KeyRevocationActionType: "",
			Kind: "",
			LabelFingerprint: "",
			Labels: "",
			LastStartTimestamp: "",
			LastStopTimestamp: "",
			LastSuspendedTimestamp: "",
			MachineType: "",
			Metadata: &computepb.Metadata{
				Fingerprint: "",
				Items: &computepb.Items{...}
				Kind: "",
			}
			MinCpuPlatform: "",
			Name: "",
			NetworkInterfaces: &computepb.NetworkInterface{
				AccessConfigs: &computepb.AccessConfig{...}
				AliasIpRanges: &computepb.AliasIpRange{...}
				Fingerprint: "",
				InternalIpv6PrefixLength: "",
				Ipv6AccessConfigs: &computepb.AccessConfig{...}
				Ipv6AccessType: "",
				Ipv6Address: "",
				Kind: "",
				Name: "",
				Network: "",
				NetworkAttachment: "",
				NetworkIP: "",
				NicType: "",
				QueueCount: "",
				StackType: "",
				Subnetwork: "",
			}
			NetworkPerformanceConfig: &computepb.NetworkPerformanceConfig{
				TotalEgressBandwidthTier: "",
			}
			Params: &computepb.InstanceParams{
				ResourceManagerTags: "",
			}
			PrivateIpv6GoogleAccess: "",
			ReservationAffinity: &computepb.ReservationAffinity{
				ConsumeReservationType: "",
				Key: "",
				Values: "",
			}
			ResourcePolicies: "",
			ResourceStatus: &computepb.ResourceStatus{
				PhysicalHost: "",
				UpcomingMaintenance: &computepb.UpcomingMaintenance{...}
			}
			SatisfiesPzi: "",
			SatisfiesPzs: "",
			Scheduling: &computepb.Scheduling{
				AutomaticRestart: "",
				InstanceTerminationAction: "",
				LocalSsdRecoveryTimeout: &computepb.Duration{...}
				LocationHint: "",
				MinNodeCpus: "",
				NodeAffinities: &computepb.SchedulingNodeAffinity{...}
				OnHostMaintenance: "",
				Preemptible: "",
				ProvisioningModel: "",
			}
			SelfLink: "",
			ServiceAccounts: &computepb.ServiceAccount{
				Email: "",
				Scopes: "",
			}
			ShieldedInstanceConfig: &computepb.ShieldedInstanceConfig{
				EnableIntegrityMonitoring: "",
				EnableSecureBoot: "",
				EnableVtpm: "",
			}
			ShieldedInstanceIntegrityPolicy: &computepb.ShieldedInstanceIntegrityPolicy{
				UpdateAutoLearnPolicy: "",
			}
			SourceMachineImage: "",
			SourceMachineImageEncryptionKey: &computepb.CustomerEncryptionKey{
				KmsKeyName: "",
				KmsKeyServiceAccount: "",
				RawKey: "",
				RsaEncryptedKey: "",
				Sha256: "",
			}
			StartRestricted: "",
			Status: "",
			StatusMessage: "",
			Tags: &computepb.Tags{
				Fingerprint: "",
				Items: "",
			}
			Zone: "",
		}
		MinimalAction: "",
		MostDisruptiveAllowedAction: "",
		Project: "",
		RequestId: "",
		Zone: "",
	}
	resp, err := c.Update(ctx, req)
	if err != nil {
		// TODO: Handle error.
	}
	// TODO: Use resp.
	_ = resp
}

// [END compute_v1_generated_Instances_Update_sync]
